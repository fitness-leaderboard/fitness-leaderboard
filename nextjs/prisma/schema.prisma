generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  APIToken  APIToken[]
  Profile   Profile?
}

model Profile {
  id               Int                @id @unique @default(autoincrement())
  name             String
  birthday         DateTime
  bio              String
  profilePicture   String             @default("https://upload.wikimedia.org/wikipedia/commons/thumb/2/2c/Default_pfp.svg/1200px-Default_pfp.svg.png")
  BikingActivity   BikingActivity[]
  HikingActivity   HikingActivity[]
  user             User               @relation(fields: [id], references: [id])
  ProfileBadge     ProfileBadge[]
  ProfileRoom      ProfileRoom[]
  ranks            Rank[]
  RowingActivity   RowingActivity[]
  RunningActivity  RunningActivity[]
  SwimmingActivity SwimmingActivity[]
  WalkingActivity  WalkingActivity[]
}

model Badge {
  id           Int            @id @default(autoincrement())
  name         String
  description  String
  iconPath     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ProfileBadge ProfileBadge[]
  Challenge    Challenge[]
}

model ProfileBadge {
  profileId Int
  badgeId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  badge     Badge    @relation(fields: [badgeId], references: [id])
  profile   Profile  @relation(fields: [profileId], references: [id])

  @@id([profileId, badgeId])
}

model Room {
  id          Int           @id @default(autoincrement())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Leaderboard Leaderboard[]
  ProfileRoom ProfileRoom[]
}

model ProfileRoom {
  profileId Int
  roomId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   Profile  @relation(fields: [profileId], references: [id])
  Room      Room     @relation(fields: [roomId], references: [id])

  @@id([roomId, profileId])
}

model Leaderboard {
  id             Int          @id @default(autoincrement())
  name           String
  activityTypeId Int
  createdAt      DateTime     @default(now())
  startDate      DateTime     @default(now())
  endDate        DateTime     @default(now())
  roomId         Int
  ActivityType   ActivityType @relation(fields: [activityTypeId], references: [id])
  Room           Room         @relation(fields: [roomId], references: [id])
  ranks          Rank[]

  @@unique([activityTypeId, startDate, endDate])
}

model Challenge {
  id             Int          @id @default(autoincrement())
  name           String
  description    String
  activityTypeId Int
  createdAt      DateTime     @default(now())
  startDate      DateTime     @default(now())
  endDate        DateTime     @default(now())
  badgeId        Int
  Badge          Badge        @relation(fields: [badgeId], references: [id])
  ActivityType   ActivityType @relation(fields: [activityTypeId], references: [id])
}

model ActivityType {
  id          Int           @id @default(autoincrement())
  name        String
  Leaderboard Leaderboard[]
  Challenge   Challenge[]
}

model RunningActivity {
  id          Int      @id @default(autoincrement())
  profileId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  distance    Decimal
  movingTime  Int
  elapsedTime Int
  elevation   Int
  avgSpeed    Decimal
  score       Decimal
  Profile     Profile  @relation(fields: [profileId], references: [id])
}

model BikingActivity {
  id          Int      @id @default(autoincrement())
  profileId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  distance    Decimal
  movingTime  Int
  elapsedTime Int
  elevation   Int
  avgSpeed    Decimal
  score       Decimal
  Profile     Profile  @relation(fields: [profileId], references: [id])
}

model SwimmingActivity {
  id          Int      @id @default(autoincrement())
  profileId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  distance    Decimal
  movingTime  Int
  elapsedTime Int
  avgSpeed    Decimal
  score       Decimal
  Profile     Profile  @relation(fields: [profileId], references: [id])
}

model WalkingActivity {
  id          Int      @id @default(autoincrement())
  profileId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  distance    Decimal
  movingTime  Int
  elapsedTime Int
  elevation   Int
  avgSpeed    Decimal
  score       Decimal
  Profile     Profile  @relation(fields: [profileId], references: [id])
}

model HikingActivity {
  id          Int      @id @default(autoincrement())
  profileId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  distance    Decimal
  movingTime  Int
  elapsedTime Int
  elevation   Int
  avgSpeed    Decimal
  score       Decimal
  Profile     Profile  @relation(fields: [profileId], references: [id])
}

model RowingActivity {
  id          Int      @id @default(autoincrement())
  profileId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  distance    Decimal
  movingTime  Int
  elapsedTime Int
  avgSpeed    Decimal
  score       Decimal
  Profile     Profile  @relation(fields: [profileId], references: [id])
}

model Rank {
  id            Int         @id @default(autoincrement())
  leaderboardId Int
  profileId     Int
  rank          Int
  date          DateTime
  leaderboard   Leaderboard @relation(fields: [leaderboardId], references: [id])
  Profile       Profile     @relation(fields: [profileId], references: [id])

  @@unique([leaderboardId, rank, date])
}

model APIType {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  APIToken  APIToken[]
}

model APIToken {
  id           Int      @id @default(autoincrement())
  apiTypeId    Int
  userId       Int
  accessToken  String   @unique
  refreshToken String   @unique
  expiresAt    DateTime
  expiresin    Int
  scopes       String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  apiType      APIType  @relation(fields: [apiTypeId], references: [id])
  user         User     @relation(fields: [userId], references: [id])
}
