generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  email         String?    @unique
  password      String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  emailVerified DateTime?  @map("email_verified")
  image         String?
  name          String?
  APIToken      APIToken[]
  Accounts      Account[]
  Profile       Profile?
  Session       Session?
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [id], references: [id])
}

model VerificationToken {
  token   String   @unique
  expires DateTime
  email   String
  id      String   @id @default(uuid())

  @@unique([email, token])
}

model Profile {
  id               String             @id @default(uuid())
  name             String
  birthday         DateTime
  bio              String
  profilePicture   String             @default("https://upload.wikimedia.org/wikipedia/commons/thumb/2/2c/Default_pfp.svg/1200px-Default_pfp.svg.png")
  BikingActivity   BikingActivity[]
  HikingActivity   HikingActivity[]
  userId           User               @relation(fields: [id], references: [id])
  ProfileBadge     ProfileBadge[]
  ProfileRoom      ProfileRoom[]
  ranks            Rank[]
  RowingActivity   RowingActivity[]
  RunningActivity  RunningActivity[]
  SwimmingActivity SwimmingActivity[]
  WalkingActivity  WalkingActivity[]
}

model Badge {
  id           Int            @id @default(autoincrement())
  name         String
  description  String
  iconPath     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Challenge    Challenge[]
  ProfileBadge ProfileBadge[]
}

model ProfileBadge {
  profileId String
  badgeId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  badge     Badge    @relation(fields: [badgeId], references: [id])
  profile   Profile  @relation(fields: [profileId], references: [id])

  @@id([profileId, badgeId])
}

model Room {
  id          Int           @id @default(autoincrement())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Leaderboard Leaderboard[]
  ProfileRoom ProfileRoom[]
}

model ProfileRoom {
  profileId String
  roomId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   Profile  @relation(fields: [profileId], references: [id])
  Room      Room     @relation(fields: [roomId], references: [id])

  @@id([roomId, profileId])
}

model Leaderboard {
  id             Int          @id @default(autoincrement())
  name           String
  activityTypeId Int
  createdAt      DateTime     @default(now())
  startDate      DateTime     @default(now())
  endDate        DateTime     @default(now())
  roomId         Int
  ActivityType   ActivityType @relation(fields: [activityTypeId], references: [id])
  Room           Room         @relation(fields: [roomId], references: [id])
  ranks          Rank[]

  @@unique([activityTypeId, startDate, endDate])
}

model Challenge {
  id             Int          @id @default(autoincrement())
  name           String
  description    String
  activityTypeId Int
  createdAt      DateTime     @default(now())
  startDate      DateTime     @default(now())
  endDate        DateTime     @default(now())
  badgeId        Int
  ActivityType   ActivityType @relation(fields: [activityTypeId], references: [id])
  Badge          Badge        @relation(fields: [badgeId], references: [id])
}

model ActivityType {
  id          Int           @id @default(autoincrement())
  name        String
  Challenge   Challenge[]
  Leaderboard Leaderboard[]
}

model RunningActivity {
  id          Int      @id @default(autoincrement())
  profileId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  distance    Decimal
  movingTime  Int
  elapsedTime Int
  elevation   Int
  avgSpeed    Decimal
  score       Decimal
  Profile     Profile  @relation(fields: [profileId], references: [id])
}

model BikingActivity {
  id          Int      @id @default(autoincrement())
  profileId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  distance    Decimal
  movingTime  Int
  elapsedTime Int
  elevation   Int
  avgSpeed    Decimal
  score       Decimal
  Profile     Profile  @relation(fields: [profileId], references: [id])
}

model SwimmingActivity {
  id          Int      @id @default(autoincrement())
  profileId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  distance    Decimal
  movingTime  Int
  elapsedTime Int
  avgSpeed    Decimal
  score       Decimal
  Profile     Profile  @relation(fields: [profileId], references: [id])
}

model WalkingActivity {
  id          Int      @id @default(autoincrement())
  profileId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  distance    Decimal
  movingTime  Int
  elapsedTime Int
  elevation   Int
  avgSpeed    Decimal
  score       Decimal
  Profile     Profile  @relation(fields: [profileId], references: [id])
}

model HikingActivity {
  id          Int      @id @default(autoincrement())
  profileId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  distance    Decimal
  movingTime  Int
  elapsedTime Int
  elevation   Int
  avgSpeed    Decimal
  score       Decimal
  Profile     Profile  @relation(fields: [profileId], references: [id])
}

model RowingActivity {
  id          Int      @id @default(autoincrement())
  profileId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  distance    Decimal
  movingTime  Int
  elapsedTime Int
  avgSpeed    Decimal
  score       Decimal
  Profile     Profile  @relation(fields: [profileId], references: [id])
}

model Rank {
  id            Int         @id @default(autoincrement())
  leaderboardId Int
  profileId     String
  rank          Int
  date          DateTime
  leaderboard   Leaderboard @relation(fields: [leaderboardId], references: [id])
  Profile       Profile     @relation(fields: [profileId], references: [id])

  @@unique([leaderboardId, rank, date])
}

model APIType {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  APIToken  APIToken[]
}

model APIToken {
  id           Int      @id @default(autoincrement())
  apiTypeId    Int
  userId       String
  accessToken  String   @unique
  refreshToken String   @unique
  expiresAt    DateTime
  expiresin    Int
  scopes       String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  apiType      APIType  @relation(fields: [apiTypeId], references: [id])
  user         User     @relation(fields: [userId], references: [id])
}
