// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  name      String?
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Profile   Profile[]
  APIToken  APIToken[]
}

model Profile {
  id           Int            @id @default(autoincrement())
  user         User           @relation(fields: [userId], references: [id])
  userId       Int
  ranks        Rank[]
  RunningStat  RunningStat[]
  BikingStat   BikingStat[]
  SwimmingStat SwimmingStat[]
  WalkingStat  WalkingStat[]
  HikingStat   HikingStat[]
  RowingStat   RowingStat[]
}

model APIToken {
  id           Int      @id @default(autoincrement())
  apiType      APIType  @relation(fields: [apiTypeId], references: [id])
  apiTypeId    Int
  accessToken  String   @unique
  refreshToken String   @unique
  expiresAt    DateTime
  expiresin    Int
  scopes       String[]
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model APIType {
  id        Int        @id @default(autoincrement())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  APIToken  APIToken[]
}

model Badge {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  iconPath    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Leaderboard {
  id             Int            @id @default(autoincrement())
  name           String
  activityType   ActivityType   @relation(fields: [activityTypeId], references: [id])
  activityTypeId Int
  createdAt      DateTime       @default(now())
  startDate      DateTime       @default(now())
  endDate        DateTime       @default(now())
  runningStats   RunningStat[]
  bikingStats    BikingStat[]
  swimmingStats  SwimmingStat[]
  walkingStats   WalkingStat[]
  hikingStats    HikingStat[]
  rowingStats    RowingStat[]
  ranks          Rank[]
}

model ActivityType {
  id          Int           @id @default(autoincrement())
  name        String
  Leaderboard Leaderboard[]
}

model RunningStat {
  id            Int         @id @default(autoincrement())
  leaderboard   Leaderboard @relation(fields: [leaderboardId], references: [id])
  leaderboardId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  distance      Decimal
  movingTime    Int
  elapsedTime   Int
  elevation     Int
  avgSpeed      Decimal
  score         Decimal
  Profile       Profile?    @relation(fields: [profileId], references: [id])
  profileId     Int?
}

model BikingStat {
  id            Int         @id @default(autoincrement())
  leaderboard   Leaderboard @relation(fields: [leaderboardId], references: [id])
  leaderboardId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  distance      Decimal
  movingTime    Int
  elapsedTime   Int
  elevation     Int
  avgSpeed      Decimal
  score         Decimal
  Profile       Profile?    @relation(fields: [profileId], references: [id])
  profileId     Int?
}

model SwimmingStat {
  id            Int         @id @default(autoincrement())
  leaderboard   Leaderboard @relation(fields: [leaderboardId], references: [id])
  leaderboardId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  distance      Decimal
  movingTime    Int
  elapsedTime   Int
  avgSpeed      Decimal
  score         Decimal
  Profile       Profile?    @relation(fields: [profileId], references: [id])
  profileId     Int?
}

model WalkingStat {
  id            Int         @id @default(autoincrement())
  leaderboard   Leaderboard @relation(fields: [leaderboardId], references: [id])
  leaderboardId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  distance      Decimal
  movingTime    Int
  elapsedTime   Int
  elevation     Int
  avgSpeed      Decimal
  score         Decimal
  Profile       Profile?    @relation(fields: [profileId], references: [id])
  profileId     Int?
}

model HikingStat {
  id            Int         @id @default(autoincrement())
  leaderboard   Leaderboard @relation(fields: [leaderboardId], references: [id])
  leaderboardId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  distance      Decimal
  movingTime    Int
  elapsedTime   Int
  elevation     Int
  avgSpeed      Decimal
  score         Decimal
  Profile       Profile?    @relation(fields: [profileId], references: [id])
  profileId     Int?
}

model RowingStat {
  id            Int         @id @default(autoincrement())
  leaderboard   Leaderboard @relation(fields: [leaderboardId], references: [id])
  leaderboardId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  distance      Decimal
  movingTime    Int
  elapsedTime   Int
  avgSpeed      Decimal
  score         Decimal
  Profile       Profile?    @relation(fields: [profileId], references: [id])
  profileId     Int?
}

model Rank {
  id            Int         @id @default(autoincrement())
  leaderboard   Leaderboard @relation(fields: [leaderboardId], references: [id])
  leaderboardId Int
  rank          Int
  date          DateTime    @default(now())
  Profile       Profile?    @relation(fields: [profileId], references: [id])
  profileId     Int?
}
