// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  name         String?
  password     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  accessToken  String?
  refreshToken String?
  tokens       Token[]
  Profile      Profile[]
}

model Profile {
  id           String         @id @default(uuid())
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  ranks        Rank[]
  RunningStat  RunningStat[]
  BikingStat   BikingStat[]
  SwimmingStat SwimmingStat[]
  WalkingStat  WalkingStat[]
  HikingStat   HikingStat[]
  RowingStat   RowingStat[]
}

model Badge {
  id          String   @id @default(uuid())
  name        String
  description String
  iconPath    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Token {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  description String
  createdAt   DateTime @default(now())
  expiredAt   DateTime @default(now())
}

model Leaderboard {
  id             String         @id @default(uuid())
  name           String
  activityType   ActivityType   @relation(fields: [activityTypeId], references: [id])
  activityTypeId String
  createdAt      DateTime       @default(now())
  startDate      DateTime       @default(now())
  endDate        DateTime       @default(now())
  runningStats   RunningStat[]
  bikingStats    BikingStat[]
  swimmingStats  SwimmingStat[]
  walkingStats   WalkingStat[]
  hikingStats    HikingStat[]
  rowingStats    RowingStat[]
  ranks          Rank[]
}

model ActivityType {
  id          String        @id @default(uuid())
  name        String
  Leaderboard Leaderboard[]
}

model RunningStat {
  id            String      @id @default(uuid())
  leaderboard   Leaderboard @relation(fields: [leaderboardId], references: [id])
  leaderboardId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  distance      Decimal
  movingTime    Int
  elapsedTime   Int
  elevation     Int
  avgSpeed      Decimal
  score         Decimal
  Profile       Profile?    @relation(fields: [profileId], references: [id])
  profileId     String?
}

model BikingStat {
  id            String      @id @default(uuid())
  leaderboard   Leaderboard @relation(fields: [leaderboardId], references: [id])
  leaderboardId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  distance      Decimal
  movingTime    Int
  elapsedTime   Int
  elevation     Int
  avgSpeed      Decimal
  score         Decimal
  Profile       Profile?    @relation(fields: [profileId], references: [id])
  profileId     String?
}

model SwimmingStat {
  id            String      @id @default(uuid())
  leaderboard   Leaderboard @relation(fields: [leaderboardId], references: [id])
  leaderboardId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  distance      Decimal
  movingTime    Int
  elapsedTime   Int
  avgSpeed      Decimal
  score         Decimal
  Profile       Profile?    @relation(fields: [profileId], references: [id])
  profileId     String?
}

model WalkingStat {
  id            String      @id @default(uuid())
  leaderboard   Leaderboard @relation(fields: [leaderboardId], references: [id])
  leaderboardId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  distance      Decimal
  movingTime    Int
  elapsedTime   Int
  elevation     Int
  avgSpeed      Decimal
  score         Decimal
  Profile       Profile?    @relation(fields: [profileId], references: [id])
  profileId     String?
}

model HikingStat {
  id            String      @id @default(uuid())
  leaderboard   Leaderboard @relation(fields: [leaderboardId], references: [id])
  leaderboardId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  distance      Decimal
  movingTime    Int
  elapsedTime   Int
  elevation     Int
  avgSpeed      Decimal
  score         Decimal
  Profile       Profile?    @relation(fields: [profileId], references: [id])
  profileId     String?
}

model RowingStat {
  id            String      @id @default(uuid())
  leaderboard   Leaderboard @relation(fields: [leaderboardId], references: [id])
  leaderboardId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  distance      Decimal
  movingTime    Int
  elapsedTime   Int
  avgSpeed      Decimal
  score         Decimal
  Profile       Profile?    @relation(fields: [profileId], references: [id])
  profileId     String?
}

model Rank {
  id            String      @id @default(uuid())
  leaderboard   Leaderboard @relation(fields: [leaderboardId], references: [id])
  leaderboardId String
  rank          Int
  date          DateTime    @default(now())
  Profile       Profile?    @relation(fields: [profileId], references: [id])
  profileId     String?
}
